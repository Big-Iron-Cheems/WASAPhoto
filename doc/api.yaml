openapi: 3.1.0
info:
  title: WASAPhoto
  description: |-
    Keep in touch with your friends by sharing photos of special moments, thanks to WASAPhoto!

    You can upload your photos directly from your PC, and they will be visible to everyone following you.
  version: 1.0.0

components:
  schemas:
    User:
      title: User
      description: This object represents a single user
      type: object
      properties:
        userId:
          type: integer
          description: Unique identifier for the user
          example: 1234
          readOnly: true
          minimum: 0
        username:
          description: The username displayed to the others
          type: string
          example: CoolUsername42
          minLength: 3
          maxLength: 32
          pattern: '^.*?$'
      required: [ "userId", "username" ]

    Profile:
      title: Profile
      description: This object represents the profile data of a user
      type: object
      properties:
        userId: { $ref: '#/components/schemas/User/properties/userId' }
        username: { $ref: '#/components/schemas/User/properties/username' }
        photoCount:
          description: The count of how many photos this user uploaded
          type: integer
          example: 42
          minimum: 0
        followersCount:
          description: The amount of users following this user
          type: integer
          example: 42
          minimum: 0
        followingCount:
          description: The amount of users followed by this user
          type: integer
          example: 42
          minimum: 0
      required: [ "userId", "username", "photoCount", "followersCount", "followingCount" ]

    Comment:
      title: Comment
      description: This object represents a single comment bound to a Photo
      type: object
      properties:
        commentId:
          type: integer
          description: Unique identifier for the comment
          example: 1234
          minimum: 0
          readOnly: true
        owner: { $ref: '#/components/schemas/User/properties/userId' }
        content:
          type: string
          description: This is the content of the comment written by the owner
          example: "That's a nice image!"
          pattern: '^.*?$'
          minLength: 1
          maxLength: 256
      required: [ "commentId", "owner", "content" ]

    Photo:
      title: Photo
      description: This object represents a single photo in the user's feed
      type: object
      properties:
        photoId:
          type: integer
          description: Unique identifier for the photo
          example: 1234
          minimum: 0
          readOnly: true
        owner: { $ref: '#/components/schemas/User/properties/userId' }
        image:
          type: string
          format: binary
          description: Binary data of the image
          minLength: 0
          maxLength: 999999999 # This is here to handle warnings, it's not a real limit
        description:
          type: string
          description: Description or caption for the image
          example: "A beautiful landscape"
          pattern: '^.*?$'
          minLength: 0
          maxLength: 256
        uploadTime:
          type: string
          format: date-time
          description: The date and time at which this photo was uploaded
          example: 2017-07-21T17:32:28Z
        likeCount:
          type: integer
          description: Number of likes for the image
          example: 42
          minimum: 0
        commentsCount:
          type: integer
          description: Number of comments for the image
          example: 42
          minimum: 0
      required: [ "photoId", "owner", "image", "uploadTime", "likeCount", "commentsCount" ]

    Error:
      title: Error
      description: |-
        This object represents a single error to be returned for certain requests
      type: object
      properties:
        code:
          type: string
          description: An HTTP error code
          example: "404"
        message:
          type: string
          description: A brief message describing the error code
          example: The specified resource was not found
      required: [ "code", "message" ]

  parameters:
    usernameParam:
      name: username
      in: path
      description: Username of the user
      required: true
      content:
        application/json:
          schema: { $ref: '#/components/schemas/User/properties/username' }

    targetUsernameParam:
      name: targetUsername
      in: path
      description: Username of the target
      required: true
      content:
        application/json:
          schema: { $ref: '#/components/schemas/User/properties/username' }

    photoIdParam:
      name: photoId
      in: path
      description: ID of the photo
      required: true
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Photo/properties/photoId' }

    likeIdParam:
      name: likeId
      in: path
      description: ID of the like (that being the id of the liker)
      required: true
      content:
        application/json:
          schema: { $ref: '#/components/schemas/User/properties/userId' }

    commentIdParam:
      name: commentId
      in: path
      description: ID of the comment
      required: true
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Comment/properties/commentId' }

  responses:
    # 204
    NoContent:
      description: The request was successful, but there is no content to return.
    # 400
    BadRequest:
      description: The request was not compliant with the documentation (eg. missing fields, etc).
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    # 401
    Unauthorized:
      description: Invalid or expired authentication credentials.
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    # 404
    NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }
    # 500
    InternalServerError:
      description: The server encountered an internal error. Further info in server logs.
      content:
        application/json:
          schema: { $ref: '#/components/schemas/Error' }

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - bearerAuth: [ ]

tags:
  - name: Login
    description: Operations related to user login
  - name: User
    description: Operations related to user profiles
  - name: Ban
    description: Operations related to banning users
  - name: Follow
    description: Operations related to following users
  - name: Photo
    description: Operations related to photos
  - name: Like
    description: Operations related to liking photos
  - name: Comment
    description: Operations related to commenting photos

paths:
  /session:
    post:
      tags: [ "Login" ]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created, and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        required: true
        content:
          application/json:
            schema:
              type: object
              description: login schema
              properties:
                name:
                  type: string
                  description: The name of the user
                  example: Maria
                  pattern: '^.*?$'
                  minLength: 3
                  maxLength: 16
      responses: # TODO: return the auth token along with the userId, so that they can be stored in localStorage
        "201":
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                description: user schema
                properties:
                  identifier:
                    # change here if you decide to use an integer or any other type of identifier
                    type: string
                    description: Unique identifier for the user
                    example: "#U1234"
                    minLength: 3
                    maxLength: 16
      security: [ ]

  /users/{username}:
    parameters:
      - $ref: '#/components/parameters/usernameParam'
    put:
      tags: [ "User" ]
      operationId: setMyUserName
      summary: Change your username
      description: |-
        Given a user's username, update said username.
      requestBody:
        description: The new username to set
        required: true
        content:
          application/json:
            schema:
              type: object
              description: username schema
              properties:
                username: { $ref: '#/components/schemas/User/properties/username' }
      responses:
        "201":
          description: Username changed successfully
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        "400": { $ref: '#/components/responses/BadRequest' }
        "401": { $ref: '#/components/responses/Unauthorized' }
        "404": { $ref: '#/components/responses/NotFound' }
        "500": { $ref: '#/components/responses/InternalServerError' }

  /users/{username}/profile:
    parameters:
      - $ref: '#/components/parameters/usernameParam'
    get:
      tags: [ "User" ]
      operationId: getUserProfile
      summary: Retrieve the information of a user
      description: |-
        Given a user's username, retrieve all the public info available.
      responses:
        "200":
          description: Successfully retrieved profile data
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Profile' }
        "400": { $ref: '#/components/responses/BadRequest' }
        "404": { $ref: '#/components/responses/NotFound' }
        "500": { $ref: '#/components/responses/InternalServerError' }

  /users/{username}/stream:
    parameters:
      - $ref: '#/components/parameters/usernameParam'
    get:
      tags: [ "User" ]
      operationId: getMyStream
      summary: Retrieve the content stream of the user
      description: |-
        Given a user's id, retrieve the content stream.

        The stream is composed of entries that have images, likes and comments.
        These entries are sorted in reverse chronological order.
      responses:
        "200":
          description: Successfully retrieved image stream for this user
          content:
            application/json:
              schema:
                type: object
                description: photo stream schema
                properties:
                  photos:
                    type: array
                    description: The list of photos this user uploaded
                    items: { $ref: '#/components/schemas/Photo' }
                    uniqueItems: true
                    minItems: 0
                    maxItems: 99999
        "400": { $ref: '#/components/responses/BadRequest' }
        "401": { $ref: '#/components/responses/Unauthorized' }
        "404": { $ref: '#/components/responses/NotFound' }
        "500": { $ref: '#/components/responses/InternalServerError' }

  /users/{username}/bans:
    parameters:
      - $ref: '#/components/parameters/usernameParam'
    post:
      tags: [ "Ban" ]
      operationId: banUser
      summary: Ban a user
      description: Given a user's username, ban them.
      requestBody:
        description: The username of the user to ban
        required: true
        content:
          application/json:
            schema:
              type: object
              description: userId schema
              properties:
                targetUsername: { $ref: '#/components/schemas/User/properties/username' }
      responses:
        "201":
          description: User banned successfully
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        "400": { $ref: '#/components/responses/BadRequest' }
        "401": { $ref: '#/components/responses/Unauthorized' }
        "404": { $ref: '#/components/responses/NotFound' }
        "500": { $ref: '#/components/responses/InternalServerError' }

  /users/{username}/bans/{targetUsername}:
    parameters:
      - $ref: '#/components/parameters/usernameParam'
      - $ref: '#/components/parameters/targetUsernameParam'
    delete:
      tags: [ "Ban" ]
      operationId: unbanUser
      summary: Unban a user
      description: Given a user's username, unban them.
      responses:
        "204": { $ref: '#/components/responses/NoContent' }
        "400": { $ref: '#/components/responses/BadRequest' }
        "401": { $ref: '#/components/responses/Unauthorized' }
        "404": { $ref: '#/components/responses/NotFound' }
        "500": { $ref: '#/components/responses/InternalServerError' }

  /users/{username}/follows:
    parameters:
      - $ref: '#/components/parameters/usernameParam'
    post:
      tags: [ "Follow" ]
      operationId: followUser
      summary: Follow a user
      description: Given a user's username, follow them.
      requestBody:
        description: The username of the user to follow
        required: true
        content:
          application/json:
            schema:
              type: object
              description: userId schema
              properties:
                targetUsername: { $ref: '#/components/schemas/User/properties/username' }
      responses:
        "201":
          description: User followed successfully
          content:
            application/json:
              schema: { $ref: '#/components/schemas/User' }
        "400": { $ref: '#/components/responses/BadRequest' }
        "401": { $ref: '#/components/responses/Unauthorized' }
        "404": { $ref: '#/components/responses/NotFound' }
        "500": { $ref: '#/components/responses/InternalServerError' }

  /users/{username}/follows/{targetUsername}:
    parameters:
      - $ref: '#/components/parameters/usernameParam'
      - $ref: '#/components/parameters/targetUsernameParam'
    delete:
      tags: [ "Follow" ]
      operationId: unfollowUser
      summary: Unfollow a user
      description: Given a user's username, unfollow them.
      responses:
        "204": { $ref: '#/components/responses/NoContent' }
        "400": { $ref: '#/components/responses/BadRequest' }
        "401": { $ref: '#/components/responses/Unauthorized' }
        "404": { $ref: '#/components/responses/NotFound' }
        "500": { $ref: '#/components/responses/InternalServerError' }

  /users/{username}/photos:
    parameters:
      - $ref: '#/components/parameters/usernameParam'
    post:
      tags: [ "Photo" ]
      operationId: uploadPhoto
      summary: Create a post with the given photo
      description: |-
        Given the file of an image, upload it to the server under a new Photo.
      requestBody:
        description: The image to upload along with an optional description
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              description: upload schema
              properties:
                image:
                  type: string
                  description: The image file to upload
                  format: binary
                  minLength: 0
                  maxLength: 999999999 # This is here to handle warnings, it's not a real limit
                description: { $ref: '#/components/schemas/Photo/properties/description' }
      responses:
        "201":
          description: Photo uploaded successfully
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Photo' }
        "400": { $ref: '#/components/responses/BadRequest' }
        "401": { $ref: '#/components/responses/Unauthorized' }
        "404": { $ref: '#/components/responses/NotFound' }
        "500": { $ref: '#/components/responses/InternalServerError' }

  /users/{username}/photos/{photoId}:
    parameters:
      - $ref: '#/components/parameters/usernameParam'
      - $ref: '#/components/parameters/photoIdParam'
    delete:
      tags: [ "Photo" ]
      operationId: deletePhoto
      summary: Delete a photo from the current user
      description: |-
        Given the id of a photo from the current user's posts, delete it.
      responses:
        "204": { $ref: '#/components/responses/NoContent' }
        "400": { $ref: '#/components/responses/BadRequest' }
        "401": { $ref: '#/components/responses/Unauthorized' }
        "404": { $ref: '#/components/responses/NotFound' }
        "500": { $ref: '#/components/responses/InternalServerError' }

  /users/{username}/photos/{photoId}/likes:
    parameters:
      - $ref: '#/components/parameters/usernameParam'
      - $ref: '#/components/parameters/photoIdParam'
    post:
      tags: [ "Like" ]
      operationId: likePhoto
      summary: Like a photo
      description: Given a user's username, and a photo's id, like it.
      responses:
        "201":
          description: Photo liked successfully
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Photo' }
        "400": { $ref: '#/components/responses/BadRequest' }
        "401": { $ref: '#/components/responses/Unauthorized' }
        "404": { $ref: '#/components/responses/NotFound' }
        "500": { $ref: '#/components/responses/InternalServerError' }

  /users/{username}/photos/{photoId}/likes/{likeId}:
    parameters:
      - $ref: '#/components/parameters/usernameParam'
      - $ref: '#/components/parameters/photoIdParam'
      - $ref: '#/components/parameters/likeIdParam'
    delete:
      tags: [ "Like" ]
      operationId: unlikePhoto
      summary: Unlike a photo
      description: Given a user's username and a photo's id, unlike it.
      responses:
        "204": { $ref: '#/components/responses/NoContent' }
        "400": { $ref: '#/components/responses/BadRequest' }
        "401": { $ref: '#/components/responses/Unauthorized' }
        "404": { $ref: '#/components/responses/NotFound' }
        "500": { $ref: '#/components/responses/InternalServerError' }

  /users/{username}/photos/{photoId}/comments:
    parameters:
      - $ref: '#/components/parameters/usernameParam'
      - $ref: '#/components/parameters/photoIdParam'
    post:
      tags: [ "Comment" ]
      operationId: commentPhoto
      summary: Add a comment to a photo
      description: |-
        Given the id of a photo from a user (defined by username), add a comment to it.
        Multiple comments can be created by the same user.
      requestBody:
        description: The comment content
        required: true
        content:
          application/json:
            schema:
              type: object
              description: comment content schema
              properties:
                content: { $ref: '#/components/schemas/Comment/properties/content' }
      responses:
        "201":
          description: Comment added successfully
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Comment' }
        "400": { $ref: '#/components/responses/BadRequest' }
        "401": { $ref: '#/components/responses/Unauthorized' }
        "404": { $ref: '#/components/responses/NotFound' }
        "500": { $ref: '#/components/responses/InternalServerError' }

  /users/{username}/photos/{photoId}/comments/{commentId}:
    parameters:
      - $ref: '#/components/parameters/usernameParam'
      - $ref: '#/components/parameters/photoIdParam'
      - $ref: '#/components/parameters/commentIdParam'
    delete:
      tags: [ "Comment" ]
      operationId: uncommentPhoto
      summary: Remove a comment from a photo
      description: |-
        Given the id of a comment from a photo (defined by id as well), delete it.
        Only the comment owner can delete it.
      responses:
        "204": { $ref: '#/components/responses/NoContent' }
        "400": { $ref: '#/components/responses/BadRequest' }
        "401": { $ref: '#/components/responses/Unauthorized' }
        "404": { $ref: '#/components/responses/NotFound' }
        "500": { $ref: '#/components/responses/InternalServerError' }
